import {Context} from "grammy";
import {getReminderText} from "../texts";
import {InputConversations} from "./input_conversations";
import {replyOrEditMessage} from "../custom_methods";

import {MyConversation} from "../types";
import {updateTimezoneConversation} from "../update_timezone_conversation";
import moment from "moment";
import {scheduleJobs} from "../../schedule_funcs";
import {scheduleAddJobReminder} from "../schedule_reminders";


async function reminderAddConversation(conversation: MyConversation, ctx: Context) {
    const from_user_id: number = ctx.from?.id!;

    let userData = await conversation.external(async ctx1 => await ctx1.session.reminderBotDatabase.getUser(from_user_id))
    if (!userData) {
        return await ctx.reply("ü§ö –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ...");
    }
    if (!userData.timezone) {
        await ctx.answerCallbackQuery({
            text: "ü§ö –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
            show_alert: true,
        });
        await updateTimezoneConversation(conversation, ctx);
        return;
    }

    const inputConversations = new InputConversations(conversation);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const inputReminderTextResult = await inputConversations.inputReminderText(ctx);
    const {reminderMessageText} = inputReminderTextResult;

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const inputReminderDateResult = await inputConversations.inputReminderDate(inputReminderTextResult.context);
    if (inputReminderDateResult === undefined) {
        return;
    }
    const {reminderDate} = inputReminderDateResult;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const inputReminderTimeResult = await inputConversations.inputReminderTime(
        reminderDate, userData, inputReminderDateResult.context);
    if (inputReminderTimeResult === undefined) {
        return;
    }
    const {reminderDateTime} = inputReminderTimeResult;

    userData = await conversation.external(async ctx1 => await ctx1.session.reminderBotDatabase.getUser(from_user_id));
    if (!userData) {
        return;
    }
    const reminderDataTimezone = userData.timezone?.replace("UTC", "");
    if (!reminderDataTimezone) {
        return;
    }

    if (reminderDateTime < moment()) { // –ï—Å–ª–∏ –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π
        return await ctx.reply("ü§ö –í–≤–µ–¥–µ–Ω–∞—è –≤–∞–º–∏ –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π...")
    }

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    const inputReminderConfirmResult = await inputConversations.inputReminderConfirm(
        inputReminderTimeResult.context,
        reminderDateTime,
        reminderMessageText
    );
    if (inputReminderConfirmResult === undefined) {
        return;
    }
    const {reminderConfirm} = inputReminderConfirmResult;

    if (reminderConfirm) {
        // –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ë–î
        await conversation.external(async ctx => {
            const reminder_id = await ctx.session.reminderBotDatabase.addUserReminder(
                from_user_id,
                reminderMessageText,
                reminderDateTime,
                moment()
            );
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            scheduleAddJobReminder(
                scheduleJobs,
                reminderDateTime,
                ctx.session.reminderBotDatabase,
                ctx.session.bot,
                from_user_id,
                reminder_id
            );
        })
    }

    await replyOrEditMessage(
        getReminderText(reminderDateTime, reminderMessageText, userData?.timezone!, reminderConfirm),
        {parse_mode: "HTML"},
        inputReminderConfirmResult.context
    );
}

export {reminderAddConversation};
