import {Context} from "grammy";
import moment, {Moment} from "moment";
import {MyConversation} from "../types";
import {replyOrEditMessage} from "../custom_methods";
import {backToMainMenuKb, confirmAddReminderKb, selectDateKb, selectUTCTimeKb} from "../keyboard";
import {UsersTableModel} from "../../database/models/tables";
import {UTCOffsetToNumber} from "../../utc_offset";
import {getReminderText} from "../texts";


class InputConversations {
    private conversation;

    constructor(conversation: MyConversation) {
        this.conversation = conversation;
    }

    async inputReminderText(ctx: Context): Promise<{ reminderMessageText: string, context: Context }> {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await replyOrEditMessage("<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>", {
            reply_markup: backToMainMenuKb,
            parse_mode: "HTML"
        }, ctx);
        const context = await this.conversation.waitFor("message:text");
        return {reminderMessageText: context.message.text, context};
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –¥–∞—Ç—ã –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –≤–ø–∏—Å–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
     * **/
    async inputReminderDate(ctx: Context): Promise<{ reminderDate: Moment, context: Context } | undefined> {
        const regMatcher = /(\d{2})\.(\d{2})\.(\d{4})/;

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await replyOrEditMessage("<b>üìù –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å–Ω–∏–∑—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–¥–¥.–º–º.–≥–≥–≥–≥</code>:</b>", {
            reply_markup: selectDateKb(),
            parse_mode: "HTML"
        }, ctx)
        const context = await this.conversation.waitFor(["message:text", "callback_query:data"]);
        let parsedDate: RegExpMatchArray | null;

        let year: number, month: number, day: number;

        if (context.callbackQuery) {
            const selectTimeAddParams = context.callbackQuery.data.split(":");
            const amount = parseInt(selectTimeAddParams[1]);
            const unit = selectTimeAddParams[2];

            if (unit === "days") {
                const momentPlus1Min = moment().add(amount, unit);
                year = momentPlus1Min.year();
                month = momentPlus1Min.month();
                day = momentPlus1Min.date();
            } else {
                throw Error("Unit –Ω–µ —Ä–∞–≤–Ω—è–µ—Ç—Å—è `days` –∏–ª–∏ `seconds`");
            }
        } else {
            parsedDate = context.message.text.match(regMatcher);
            if (!parsedDate) {
                await ctx.reply("<b>ü§ö –í–≤–µ–¥–µ–Ω–∞—è –≤–∞–º–∏ –¥–∞—Ç–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É...</b>", {parse_mode: "HTML"});
                return;
            }
            year = parseInt(parsedDate![3]);
            month = parseInt(parsedDate![2]) - 1;
            day = parseInt(parsedDate![1]);
        }

        const reminderDate = moment({
            year: year,
            month: month,
            day: day,
        });

        const nowDateTime = moment();
        if (reminderDate.isBefore(nowDateTime, "day")) {
            await ctx.reply("<b>ü§ö –í–≤–µ–¥–µ–Ω–∞—è –≤–∞–º–∏ –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π...</b>", {parse_mode: "HTML"});
            return;
        }

        const diffTime = reminderDate.toDate().getTime() - nowDateTime.toDate().getTime();
        const daysDifference = Math.floor(diffTime / 1000 / 60 / 60 / 24);

        if (daysDifference > 60) {
            await ctx.reply("<b>ü§ö –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ–ª—å—à–µ —á–µ–º –Ω–∞ 60 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥...</b>", {parse_mode: "HTML"})
            return;
        }

        return {reminderDate, context};
    }

    /**
     * –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ç–∏–ø–µ –¥–∞–Ω–Ω—ã—Ö Moment
     * **/
    async inputReminderTime(dateTime: Moment, userData: UsersTableModel, ctx: Context): Promise<{
        reminderDateTime: Moment, context: Context
    } | undefined> {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await replyOrEditMessage("<b>üìù –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>—á—á:–º–º</code> (24-hour):</b>", {
            reply_markup: selectUTCTimeKb(),
            parse_mode: "HTML"
        }, ctx)
        const messageOrCallback = await this.conversation.waitFor(["message:text", "callback_query:data"]);

        let hours: number, minutes: number, seconds: number;

        // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª inline –∫–Ω–æ–ø–∫—É
        if (messageOrCallback.callbackQuery) {
            const selectTimeAddParams = messageOrCallback.callbackQuery.data.split(":");
            const amount = parseInt(selectTimeAddParams[1]);
            const unit = selectTimeAddParams[2];

            if (unit === "minutes" || unit === "seconds") {
                const momentPlus1Min = moment().add(amount, unit);
                hours = momentPlus1Min.hours();
                minutes = momentPlus1Min.minutes();
                seconds = momentPlus1Min.seconds();
            } else {
                throw Error("Unit –Ω–µ —Ä–∞–≤–Ω—è–µ—Ç—Å—è `minutes` –∏–ª–∏ `seconds`");
            }
        }
        // –ò–ª–∏ –µ—Å–ª–∏ –≤–≤–µ–ª –≤—Ä–µ–º—è —Ç–µ–∫—Å—Ç–æ–º
        else {
            let enteredTimeWithTimezone = messageOrCallback.message.text.match(/(\d{2}):(\d{2})/);
            if (!enteredTimeWithTimezone) {
                await ctx.reply("<b>ü§ö –í–≤–µ–¥–µ–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É...</b>", {parse_mode: "HTML"});
                return;
            }
            hours = parseInt(enteredTimeWithTimezone[1]);
            minutes = parseInt(enteredTimeWithTimezone[2]);
            seconds = 0;
        }

        const reminderDateTime = moment({
            year: dateTime.year(),
            month: dateTime.month(),
            day: dateTime.date(),
            hours: hours,
            minutes: minutes,
            seconds: seconds
        }).utcOffset(UTCOffsetToNumber(userData.timezone!));


        // if (reminderTimeData.hours > 23 || reminderTimeData.minutes < 0) {
        //     await ctx.reply("<b>ü§ö –í–≤–µ–¥–µ–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É...</b>", {parse_mode: "HTML"});
        //     return;
        // }
        // if (reminderTimeData.minutes > 59 || reminderTimeData.minutes < 0) {
        //     await ctx.reply("<b>ü§ö –í–≤–µ–¥–µ–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–¥–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É...</b>", {parse_mode: "HTML"});
        //     return;sud
        // }
        return {reminderDateTime, context: messageOrCallback};
    }

    async inputReminderConfirm(ctx: Context, reminderDateTime: Moment, reminderMessageText: string): Promise<{
        reminderConfirm: boolean,
        context: Context
    } | undefined> {
        const from_user_id = ctx.from?.id!;
        const userData = await this.conversation.external(async ctx => await ctx.session.reminderBotDatabase.getUser(from_user_id));

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await replyOrEditMessage(getReminderText(reminderDateTime, reminderMessageText, userData?.timezone!), {
            parse_mode: "HTML",
            reply_markup: confirmAddReminderKb
        }, ctx);

        const addReminderCallback = await this.conversation.waitForCallbackQuery(/addReminder:(\w{2,3})/);

        let reminderConfirm;
        if (addReminderCallback.callbackQuery.data == "addReminder:no")
            reminderConfirm = false;
        else if (addReminderCallback.callbackQuery.data == "addReminder:yes")
            reminderConfirm = true;
        else
            throw new Error()

        return {reminderConfirm: reminderConfirm, context: addReminderCallback};
    }
}


export {InputConversations};
